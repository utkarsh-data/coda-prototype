{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red236\green241\blue247;\red251\green0\blue7;
\red0\green0\blue0;\red42\green42\blue42;\red107\green0\blue1;\red0\green0\blue255;\red77\green80\blue85;
\red24\green112\blue43;\red9\green60\blue148;\red19\green118\blue70;\red111\green14\blue195;\red164\green69\blue11;
\red14\green110\blue109;}
{\*\expandedcolortbl;;\cssrgb\c50196\c50196\c50196;\cssrgb\c94118\c95686\c97647;\cssrgb\c100000\c0\c0;
\cssrgb\c0\c0\c0;\cssrgb\c21961\c21961\c21961;\cssrgb\c50196\c0\c0;\cssrgb\c0\c0\c100000;\cssrgb\c37255\c38824\c40784;
\cssrgb\c9412\c50196\c21961;\cssrgb\c1569\c31765\c64706;\cssrgb\c3529\c52549\c34510;\cssrgb\c51765\c18824\c80784;\cssrgb\c70980\c34902\c3137;
\cssrgb\c0\c50196\c50196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 <!DOCTYPE\cf4 \strokec4  html\cf2 \strokec2 >\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 <\cf7 \strokec7 html\cf0 \strokec5  \cf4 \strokec4 lang\cf6 \strokec6 =\cf8 \strokec8 "en"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cf6 \cb3 \strokec6 <\cf7 \strokec7 head\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf6 \strokec6 <\cf7 \strokec7 meta\cf0 \strokec5  \cf4 \strokec4 charset\cf6 \strokec6 =\cf8 \strokec8 "UTF-8"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 meta\cf0 \strokec5  \cf4 \strokec4 name\cf6 \strokec6 =\cf8 \strokec8 "viewport"\cf0 \strokec5  \cf4 \strokec4 content\cf6 \strokec6 =\cf8 \strokec8 "width=device-width, initial-scale=1.0"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 title\cf6 \strokec6 >\cf0 \strokec5 CoDA: Cognitive Data Assistant Prototype\cf6 \strokec6 </\cf7 \strokec7 title\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf9 \strokec9 <!-- Tailwind CSS CDN -->\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 script\cf0 \strokec5  \cf4 \strokec4 src\cf6 \strokec6 =\cf8 \strokec8 "https://cdn.tailwindcss.com"\cf6 \strokec6 ></\cf7 \strokec7 script\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf9 \strokec9 <!-- Google Fonts: Inter (for body) & Roboto Mono (for code) -->\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 link\cf0 \strokec5  \cf4 \strokec4 href\cf6 \strokec6 =\cf8 \strokec8 "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Roboto+Mono:wght@400;500;700&display=swap"\cf0 \strokec5  \cf4 \strokec4 rel\cf6 \strokec6 =\cf8 \strokec8 "stylesheet"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf9 \strokec9 <!-- Font Awesome for icons -->\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 link\cf0 \strokec5  \cf4 \strokec4 rel\cf6 \strokec6 =\cf8 \strokec8 "stylesheet"\cf0 \strokec5  \cf4 \strokec4 href\cf6 \strokec6 =\cf8 \strokec8 "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 style\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 body\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 font-family:\cf0 \strokec5  \cf10 \strokec10 'Inter'\cf0 \strokec5 , \cf11 \strokec11 sans-serif\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 linear-gradient(\cf12 \strokec12 135deg\cf0 \strokec5 , \cf11 \strokec11 #1a202c\cf0 \strokec5  \cf12 \strokec12 0%\cf0 \strokec5 , \cf11 \strokec11 #2d3748\cf0 \strokec5  \cf12 \strokec12 100%\cf11 \strokec11 )\cf0 \strokec5 ; \cf9 \strokec9 /* Darker, professional gradient */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 display:\cf0 \strokec5  \cf11 \strokec11 flex\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 justify-content:\cf0 \strokec5  \cf11 \strokec11 center\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 align-items:\cf0 \strokec5  \cf11 \strokec11 center\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 min-height:\cf0 \strokec5  \cf12 \strokec12 100vh\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 padding:\cf0 \strokec5  \cf12 \strokec12 20px\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 overflow:\cf0 \strokec5  \cf11 \strokec11 hidden\cf0 \strokec5 ; \cf9 \strokec9 /* Prevent scrollbar from background animation */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 position:\cf0 \strokec5  \cf11 \strokec11 relative\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Subtle background animation - Darker bubbles */\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 .background-bubbles\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 position:\cf0 \strokec5  \cf11 \strokec11 absolute\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 100%\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 100%\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 overflow:\cf0 \strokec5  \cf11 \strokec11 hidden\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 z-index:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 .bubble\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 position:\cf0 \strokec5  \cf11 \strokec11 absolute\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 rgba(\cf12 \strokec12 255\cf0 \strokec5 , \cf12 \strokec12 255\cf0 \strokec5 , \cf12 \strokec12 255\cf0 \strokec5 , \cf12 \strokec12 0.05\cf11 \strokec11 )\cf0 \strokec5 ; \cf9 \strokec9 /* Very subtle white bubbles */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 border-radius:\cf0 \strokec5  \cf12 \strokec12 50%\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 animation:\cf0 \strokec5  \cf11 \strokec11 bubble-flow\cf0 \strokec5  \cf12 \strokec12 20s\cf0 \strokec5  \cf11 \strokec11 infinite\cf0 \strokec5  \cf11 \strokec11 ease-in-out\cf0 \strokec5  \cf11 \strokec11 alternate\cf0 \strokec5 ; \cf9 \strokec9 /* Slower animation */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 filter:\cf0 \strokec5  \cf11 \strokec11 blur(\cf12 \strokec12 8px\cf11 \strokec11 )\cf0 \strokec5 ; \cf9 \strokec9 /* More blur */\cf0 \cb1 \strokec5 \
\cb3         \}\cb1 \
\
\cb3         \cf7 \strokec7 .bubble:nth-child\cf0 \strokec5 (1) \{ \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 80px\cf0 \strokec5 ; \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 80px\cf0 \strokec5 ; \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 15%\cf0 \strokec5 ; \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 10%\cf0 \strokec5 ; \cf4 \strokec4 animation-duration:\cf0 \strokec5  \cf12 \strokec12 22s\cf0 \strokec5 ; \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0.05\cf0 \strokec5 ; \}\cb1 \
\cb3         \cf7 \strokec7 .bubble:nth-child\cf0 \strokec5 (2) \{ \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 120px\cf0 \strokec5 ; \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 120px\cf0 \strokec5 ; \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 35%\cf0 \strokec5 ; \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 80%\cf0 \strokec5 ; \cf4 \strokec4 animation-duration:\cf0 \strokec5  \cf12 \strokec12 25s\cf0 \strokec5 ; \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0.04\cf0 \strokec5 ; \}\cb1 \
\cb3         \cf7 \strokec7 .bubble:nth-child\cf0 \strokec5 (3) \{ \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 90px\cf0 \strokec5 ; \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 90px\cf0 \strokec5 ; \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 70%\cf0 \strokec5 ; \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 15%\cf0 \strokec5 ; \cf4 \strokec4 animation-duration:\cf0 \strokec5  \cf12 \strokec12 19s\cf0 \strokec5 ; \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0.06\cf0 \strokec5 ; \}\cb1 \
\cb3         \cf7 \strokec7 .bubble:nth-child\cf0 \strokec5 (4) \{ \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 140px\cf0 \strokec5 ; \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 140px\cf0 \strokec5 ; \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 90%\cf0 \strokec5 ; \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 50%\cf0 \strokec5 ; \cf4 \strokec4 animation-duration:\cf0 \strokec5  \cf12 \strokec12 28s\cf0 \strokec5 ; \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0.03\cf0 \strokec5 ; \}\cb1 \
\cb3         \cf7 \strokec7 .bubble:nth-child\cf0 \strokec5 (5) \{ \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 70px\cf0 \strokec5 ; \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 70px\cf0 \strokec5 ; \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 5%\cf0 \strokec5 ; \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 60%\cf0 \strokec5 ; \cf4 \strokec4 animation-duration:\cf0 \strokec5  \cf12 \strokec12 21s\cf0 \strokec5 ; \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0.07\cf0 \strokec5 ; \}\cb1 \
\cb3         \cf7 \strokec7 .bubble:nth-child\cf0 \strokec5 (6) \{ \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 100px\cf0 \strokec5 ; \cf4 \strokec4 height:\cf0 \strokec5  \cf12 \strokec12 100px\cf0 \strokec5 ; \cf4 \strokec4 left:\cf0 \strokec5  \cf12 \strokec12 50%\cf0 \strokec5 ; \cf4 \strokec4 top:\cf0 \strokec5  \cf12 \strokec12 30%\cf0 \strokec5 ; \cf4 \strokec4 animation-duration:\cf0 \strokec5  \cf12 \strokec12 23s\cf0 \strokec5 ; \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0.05\cf0 \strokec5 ; \}\cb1 \
\
\cb3         \cf13 \strokec13 @keyframes\cf0 \strokec5  \cf11 \strokec11 bubble-flow\cf0 \strokec5  \{\cb1 \
\cb3             \cf12 \strokec12 0%\cf0 \strokec5  \{ \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translate(\cf12 \strokec12 0\cf0 \strokec5 , \cf12 \strokec12 0\cf11 \strokec11 )\cf0 \strokec5  \cf11 \strokec11 scale(\cf12 \strokec12 1\cf11 \strokec11 )\cf0 \strokec5 ; \}\cb1 \
\cb3             \cf12 \strokec12 50%\cf0 \strokec5  \{ \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translate(\cf12 \strokec12 70px\cf0 \strokec5 , \cf12 \strokec12 -70px\cf11 \strokec11 )\cf0 \strokec5  \cf11 \strokec11 scale(\cf12 \strokec12 1.1\cf11 \strokec11 )\cf0 \strokec5 ; \}\cb1 \
\cb3             \cf12 \strokec12 100%\cf0 \strokec5  \{ \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translate(\cf12 \strokec12 0\cf0 \strokec5 , \cf12 \strokec12 0\cf11 \strokec11 )\cf0 \strokec5  \cf11 \strokec11 scale(\cf12 \strokec12 1\cf11 \strokec11 )\cf0 \strokec5 ; \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Custom scrollbar for chat and results */\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 .custom-scrollbar::-webkit-scrollbar\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 width:\cf0 \strokec5  \cf12 \strokec12 8px\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 .custom-scrollbar::-webkit-scrollbar-track\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 #2d3748\cf0 \strokec5 ; \cf9 \strokec9 /* Darker track */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 border-radius:\cf0 \strokec5  \cf12 \strokec12 10px\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 .custom-scrollbar::-webkit-scrollbar-thumb\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 #4a5568\cf0 \strokec5 ; \cf9 \strokec9 /* Medium grey thumb */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 border-radius:\cf0 \strokec5  \cf12 \strokec12 10px\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 .custom-scrollbar::-webkit-scrollbar-thumb:hover\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 #718096\cf0 \strokec5 ; \cf9 \strokec9 /* Lighter grey on hover */\cf0 \cb1 \strokec5 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Animation for new messages */\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 @keyframes\cf0 \strokec5  \cf11 \strokec11 fadeIn\cf0 \strokec5  \{\cb1 \
\cb3             \cf11 \strokec11 from\cf0 \strokec5  \{ \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5 ; \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translateY(\cf12 \strokec12 10px\cf11 \strokec11 )\cf0 \strokec5 ; \}\cb1 \
\cb3             \cf11 \strokec11 to\cf0 \strokec5  \{ \cf4 \strokec4 opacity:\cf0 \strokec5  \cf12 \strokec12 1\cf0 \strokec5 ; \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translateY(\cf12 \strokec12 0\cf11 \strokec11 )\cf0 \strokec5 ; \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 .fade-in-message\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 animation:\cf0 \strokec5  \cf11 \strokec11 fadeIn\cf0 \strokec5  \cf12 \strokec12 0.3s\cf0 \strokec5  \cf11 \strokec11 ease-out\cf0 \strokec5  \cf11 \strokec11 forwards\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Gradient for AI avatar */\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 .ai-avatar-gradient\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 linear-gradient(\cf12 \strokec12 45deg\cf0 \strokec5 , \cf11 \strokec11 #4299e1\cf0 \strokec5 , \cf11 \strokec11 #3182ce)\cf0 \strokec5 ; \cf9 \strokec9 /* Techy blue gradient */\cf0 \cb1 \strokec5 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Gradient for Send button */\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 .send-button-gradient\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 linear-gradient(\cf12 \strokec12 90deg\cf0 \strokec5 , \cf11 \strokec11 #4299e1\cf0 \strokec5 , \cf11 \strokec11 #3182ce)\cf0 \strokec5 ; \cf9 \strokec9 /* Techy blue gradient */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 transition:\cf0 \strokec5  \cf11 \strokec11 all\cf0 \strokec5  \cf12 \strokec12 0.3s\cf0 \strokec5  \cf11 \strokec11 ease-in-out\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 .send-button-gradient:hover\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background:\cf0 \strokec5  \cf11 \strokec11 linear-gradient(\cf12 \strokec12 90deg\cf0 \strokec5 , \cf11 \strokec11 #3182ce\cf0 \strokec5 , \cf11 \strokec11 #4299e1)\cf0 \strokec5 ; \cf9 \strokec9 /* Reverse gradient on hover */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translateY(\cf12 \strokec12 -2px\cf11 \strokec11 )\cf0 \strokec5  \cf11 \strokec11 scale(\cf12 \strokec12 1.02\cf11 \strokec11 )\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 box-shadow:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 8px\cf0 \strokec5  \cf12 \strokec12 15px\cf0 \strokec5  \cf11 \strokec11 rgba(\cf12 \strokec12 66\cf0 \strokec5 , \cf12 \strokec12 153\cf0 \strokec5 , \cf12 \strokec12 225\cf0 \strokec5 , \cf12 \strokec12 0.4\cf11 \strokec11 )\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 .send-button-gradient:active\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 transform:\cf0 \strokec5  \cf11 \strokec11 translateY(\cf12 \strokec12 0\cf11 \strokec11 )\cf0 \strokec5  \cf11 \strokec11 scale(\cf12 \strokec12 0.98\cf11 \strokec11 )\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 box-shadow:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 2px\cf0 \strokec5  \cf12 \strokec12 5px\cf0 \strokec5  \cf11 \strokec11 rgba(\cf12 \strokec12 66\cf0 \strokec5 , \cf12 \strokec12 153\cf0 \strokec5 , \cf12 \strokec12 225\cf0 \strokec5 , \cf12 \strokec12 0.2\cf11 \strokec11 )\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Code block styling */\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 .code-block\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 background-color:\cf0 \strokec5  \cf11 \strokec11 #2d3748\cf0 \strokec5 ; \cf9 \strokec9 /* Dark code background */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 border-left:\cf0 \strokec5  \cf12 \strokec12 4px\cf0 \strokec5  \cf11 \strokec11 solid\cf0 \strokec5  \cf11 \strokec11 #4299e1\cf0 \strokec5 ; \cf9 \strokec9 /* Techy blue left border */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 padding:\cf0 \strokec5  \cf12 \strokec12 1rem\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 border-radius:\cf0 \strokec5  \cf12 \strokec12 0.75rem\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 font-family:\cf0 \strokec5  \cf10 \strokec10 'Roboto Mono'\cf0 \strokec5 , \cf11 \strokec11 monospace\cf0 \strokec5 ; \cf9 \strokec9 /* Techy monospace font */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 color:\cf0 \strokec5  \cf11 \strokec11 #edf2f7\cf0 \strokec5 ; \cf9 \strokec9 /* Light text for dark background */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 white-space:\cf0 \strokec5  \cf11 \strokec11 pre-wrap\cf0 \strokec5 ; \cf9 \strokec9 /* Wrap long lines */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 word-break:\cf0 \strokec5  \cf11 \strokec11 break-all\cf0 \strokec5 ; \cf9 \strokec9 /* Break words for very long lines */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 overflow-x:\cf0 \strokec5  \cf11 \strokec11 auto\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 max-height:\cf0 \strokec5  \cf12 \strokec12 200px\cf0 \strokec5 ;\cb1 \
\cb3             \cf4 \strokec4 box-shadow:\cf0 \strokec5  \cf11 \strokec11 inset\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 10px\cf0 \strokec5  \cf11 \strokec11 rgba(\cf12 \strokec12 0\cf0 \strokec5 ,\cf12 \strokec12 0\cf0 \strokec5 ,\cf12 \strokec12 0\cf0 \strokec5 ,\cf12 \strokec12 0.2\cf11 \strokec11 )\cf0 \strokec5 ; \cf9 \strokec9 /* Inner shadow for depth */\cf0 \cb1 \strokec5 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 /* Input field focus glow */\cf0 \cb1 \strokec5 \
\cb3         \cf7 \strokec7 input:focus\cf0 \strokec5  \{\cb1 \
\cb3             \cf4 \strokec4 box-shadow:\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 0\cf0 \strokec5  \cf12 \strokec12 3px\cf0 \strokec5  \cf11 \strokec11 rgba(\cf12 \strokec12 66\cf0 \strokec5 , \cf12 \strokec12 153\cf0 \strokec5 , \cf12 \strokec12 225\cf0 \strokec5 , \cf12 \strokec12 0.6\cf11 \strokec11 )\cf0 \strokec5 ; \cf9 \strokec9 /* Blue glow */\cf0 \cb1 \strokec5 \
\cb3             \cf4 \strokec4 border-color:\cf0 \strokec5  \cf11 \strokec11 #4299e1\cf0 \strokec5 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \cf6 \strokec6 </\cf7 \strokec7 style\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 </\cf7 \strokec7 head\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cf6 \cb3 \strokec6 <\cf7 \strokec7 body\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "relative bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center min-h-screen"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf9 \strokec9 <!-- Background Bubbles Animation -->\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "background-bubbles"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bubble"\cf6 \strokec6 ></\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bubble"\cf6 \strokec6 ></\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bubble"\cf6 \strokec6 ></\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bubble"\cf6 \strokec6 ></\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bubble"\cf6 \strokec6 ></\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bubble"\cf6 \strokec6 ></\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3     \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "relative z-10 flex flex-col md:flex-row bg-gray-900 text-gray-200 rounded-3xl shadow-2xl overflow-hidden w-full max-w-7xl h-[90vh] md:h-[80vh] transform transition-all duration-300 hover:shadow-4xl border border-gray-700"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf9 \strokec9 <!-- Left Pane: CSV Upload & Data Preview -->\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "w-full md:w-1/3 p-8 flex flex-col border-r border-gray-700 bg-gray-800 rounded-l-3xl shadow-inner-dark overflow-y-auto custom-scrollbar"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 <\cf7 \strokec7 h2\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "text-4xl font-extrabold text-blue-400 mb-6 text-center tracking-tight"\cf6 \strokec6 >\cf0 \strokec5 CoDA \cf6 \strokec6 <\cf7 \strokec7 span\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "text-blue-600"\cf6 \strokec6 >\cf0 \strokec5 AI\cf6 \strokec6 </\cf7 \strokec7 span\cf6 \strokec6 ></\cf7 \strokec7 h2\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 <\cf7 \strokec7 p\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "text-md text-gray-400 mb-6 text-center italic"\cf6 \strokec6 >\cf0 \strokec5 Your Private, Conversational Data Analyst\cf6 \strokec6 </\cf7 \strokec7 p\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3             \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "mb-8 border-2 border-dashed border-blue-600 bg-gray-700 rounded-2xl p-8 text-center cursor-pointer hover:border-blue-500 hover:bg-gray-600 transition duration-300 ease-in-out shadow-lg hover:shadow-xl"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 label\cf0 \strokec5  \cf4 \strokec4 for\cf6 \strokec6 =\cf8 \strokec8 "csvFileInput"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "cursor-pointer text-blue-300 hover:text-blue-100 font-bold text-lg flex flex-col items-center justify-center"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 <\cf7 \strokec7 i\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "fas fa-cloud-upload-alt text-5xl mb-3 text-blue-500"\cf6 \strokec6 ></\cf7 \strokec7 i\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 <\cf7 \strokec7 span\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "block text-xl"\cf6 \strokec6 >\cf0 \strokec5 Upload CSV File\cf6 \strokec6 </\cf7 \strokec7 span\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 <\cf7 \strokec7 span\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "block text-sm text-gray-400 mt-1"\cf6 \strokec6 >\cf0 \strokec5 Click or drag & drop\cf6 \strokec6 </\cf7 \strokec7 span\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 </\cf7 \strokec7 label\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 input\cf0 \strokec5  \cf4 \strokec4 type\cf6 \strokec6 =\cf8 \strokec8 "file"\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "csvFileInput"\cf0 \strokec5  \cf4 \strokec4 accept\cf6 \strokec6 =\cf8 \strokec8 ".csv"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "hidden"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 p\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "fileNameDisplay"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "mt-4 text-gray-300 text-base font-medium"\cf6 \strokec6 ></\cf7 \strokec7 p\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 p\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "uploadStatus"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "mt-2 text-sm font-semibold text-gray-300"\cf6 \strokec6 ></\cf7 \strokec7 p\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3             \cf6 \strokec6 <\cf7 \strokec7 h3\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "text-2xl font-bold text-gray-200 mb-4 border-b pb-2 border-gray-600"\cf6 \strokec6 >\cf0 \strokec5 Data Schema\cf6 \strokec6 </\cf7 \strokec7 h3\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "schemaDisplay"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bg-gray-700 p-5 rounded-2xl flex-grow overflow-y-auto custom-scrollbar text-sm text-gray-300 shadow-lg border border-gray-600"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 p\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "text-gray-400 text-center py-4"\cf6 \strokec6 >\cf0 \strokec5 Upload a CSV to intelligently infer and display its schema here.\cf6 \strokec6 </\cf7 \strokec7 p\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3         \cf9 \strokec9 <!-- Right Pane: Conversational Interface & Results -->\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "w-full md:w-2/3 flex flex-col p-8 bg-gray-900 rounded-r-3xl"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 <\cf7 \strokec7 h2\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "text-4xl font-extrabold text-blue-400 mb-6 text-center tracking-tight"\cf6 \strokec6 >\cf0 \strokec5 Conversational Analysis\cf6 \strokec6 </\cf7 \strokec7 h2\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3             \cf9 \strokec9 <!-- Chat Area -->\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "chatArea"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "flex-grow bg-gray-800 p-6 rounded-2xl overflow-y-auto custom-scrollbar shadow-lg border border-gray-700 mb-6"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf9 \strokec9 <!-- Chat messages will be appended here -->\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "flex items-start mb-4 fade-in-message"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "flex-shrink-0 w-10 h-10 ai-avatar-gradient rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-md"\cf6 \strokec6 >\cf0 \strokec5 AI\cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "bg-blue-600 text-white p-4 rounded-3xl max-w-[80%] shadow-md transform hover:scale-[1.01] transition duration-200 ease-in-out"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                         \cf6 \strokec6 <\cf7 \strokec7 p\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "leading-relaxed"\cf6 \strokec6 >\cf0 \strokec5 Hello! Welcome to CoDA. Upload your CSV data to begin our private, client-side analysis. I'm ready to collaborate!\cf6 \strokec6 </\cf7 \strokec7 p\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3             \cf9 \strokec9 <!-- Chat Input -->\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 <\cf7 \strokec7 div\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "flex items-center space-x-3"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 input\cf0 \strokec5  \cf4 \strokec4 type\cf6 \strokec6 =\cf8 \strokec8 "text"\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "chatInput"\cf0 \strokec5  \cf4 \strokec4 placeholder\cf6 \strokec6 =\cf8 \strokec8 "Ask CoDA a question about your data, e.g., 'Show me the average sales'..."\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "flex-grow p-4 border border-gray-600 bg-gray-700 text-gray-200 rounded-full focus:outline-none focus:ring-4 focus:ring-blue-600 shadow-lg text-base transition duration-300 ease-in-out"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 <\cf7 \strokec7 button\cf0 \strokec5  \cf4 \strokec4 id\cf6 \strokec6 =\cf8 \strokec8 "sendMessageBtn"\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "send-button-gradient text-white p-4 rounded-full shadow-lg focus:outline-none focus:ring-4 focus:ring-blue-300"\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                     \cf6 \strokec6 <\cf7 \strokec7 i\cf0 \strokec5  \cf4 \strokec4 class\cf6 \strokec6 =\cf8 \strokec8 "fas fa-paper-plane text-xl"\cf6 \strokec6 ></\cf7 \strokec7 i\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3                 \cf6 \strokec6 </\cf7 \strokec7 button\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3             \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3     \cf6 \strokec6 </\cf7 \strokec7 div\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
\cb3     \cf6 \strokec6 <\cf7 \strokec7 script\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 let\cf0 \strokec5  rawData = []; \cf9 \strokec9 // Stores the parsed CSV data\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 let\cf0 \strokec5  schema = \{\}; \cf9 \strokec9 // Stores the column names and inferred types\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 let\cf0 \strokec5  pendingCleaningSuggestion = \cf13 \strokec13 null\cf0 \strokec5 ; \cf9 \strokec9 // Stores details of a pending cleaning action\cf0 \cb1 \strokec5 \
\
\cb3         \cf13 \strokec13 const\cf0 \strokec5  chatArea = document.getElementById(\cf10 \strokec10 'chatArea'\cf0 \strokec5 );\cb1 \
\cb3         \cf13 \strokec13 const\cf0 \strokec5  chatInput = document.getElementById(\cf10 \strokec10 'chatInput'\cf0 \strokec5 );\cb1 \
\cb3         \cf13 \strokec13 const\cf0 \strokec5  sendMessageBtn = document.getElementById(\cf10 \strokec10 'sendMessageBtn'\cf0 \strokec5 );\cb1 \
\cb3         \cf13 \strokec13 const\cf0 \strokec5  csvFileInput = document.getElementById(\cf10 \strokec10 'csvFileInput'\cf0 \strokec5 );\cb1 \
\cb3         \cf13 \strokec13 const\cf0 \strokec5  fileNameDisplay = document.getElementById(\cf10 \strokec10 'fileNameDisplay'\cf0 \strokec5 );\cb1 \
\cb3         \cf13 \strokec13 const\cf0 \strokec5  uploadStatus = document.getElementById(\cf10 \strokec10 'uploadStatus'\cf0 \strokec5 );\cb1 \
\cb3         \cf13 \strokec13 const\cf0 \strokec5  schemaDisplay = document.getElementById(\cf10 \strokec10 'schemaDisplay'\cf0 \strokec5 );\cb1 \
\
\cb3         \cf9 \strokec9 // Function to parse CSV data\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  parseCSV(text) \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  lines = text.split(\cf10 \strokec10 '\\n'\cf0 \strokec5 ).filter(line => line.trim() !== \cf10 \strokec10 ''\cf0 \strokec5 ); \cf9 \strokec9 // Filter out empty lines\cf0 \cb1 \strokec5 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (lines.length === \cf14 \strokec14 0\cf0 \strokec5 ) \cf13 \strokec13 return\cf0 \strokec5  [];\cb1 \
\
\cb3             \cf13 \strokec13 const\cf0 \strokec5  headers = lines[\cf14 \strokec14 0\cf0 \strokec5 ].split(\cf10 \strokec10 ','\cf0 \strokec5 ).map(header => header.trim().replace(\cf7 \strokec7 /"/\cf13 \strokec13 g\cf0 \strokec5 , \cf10 \strokec10 ''\cf0 \strokec5 ));\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  data = [];\cb1 \
\
\cb3             \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 let\cf0 \strokec5  i = \cf14 \strokec14 1\cf0 \strokec5 ; i < lines.length; i++) \{\cb1 \
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  values = lines[i].split(\cf10 \strokec10 ','\cf0 \strokec5 ).map(value => value.trim().replace(\cf7 \strokec7 /"/\cf13 \strokec13 g\cf0 \strokec5 , \cf10 \strokec10 ''\cf0 \strokec5 ));\cb1 \
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (values.length === headers.length) \{ \cf9 \strokec9 // Ensure row has correct number of columns\cf0 \cb1 \strokec5 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  row = \{\};\cb1 \
\cb3                     headers.forEach((header, index) => \{\cb1 \
\cb3                         row[header] = values[index];\cb1 \
\cb3                     \});\cb1 \
\cb3                     data.push(row);\cb1 \
\cb3                 \}\cb1 \
\cb3             \}\cb1 \
\cb3             \cf13 \strokec13 return\cf0 \strokec5  data;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Function to infer schema (basic type inference)\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  inferSchema(data) \{\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (data.length === \cf14 \strokec14 0\cf0 \strokec5 ) \cf13 \strokec13 return\cf0 \strokec5  \{\};\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  inferredSchema = \{\};\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  sampleRow = data[\cf14 \strokec14 0\cf0 \strokec5 ];\cb1 \
\
\cb3             \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  key \cf13 \strokec13 in\cf0 \strokec5  sampleRow) \{\cb1 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  type = \cf10 \strokec10 'string'\cf0 \strokec5 ;\cb1 \
\cb3                 \cf9 \strokec9 // Very basic type inference: check if all values in column can be parsed as numbers\cf0 \cb1 \strokec5 \
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  isNumeric = data.every(row => \{\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  value = row[key];\cb1 \
\cb3                     \cf13 \strokec13 return\cf0 \strokec5  value === \cf10 \strokec10 ''\cf0 \strokec5  || !isNaN(\cf15 \strokec15 Number\cf0 \strokec5 (value)); \cf9 \strokec9 // Empty string or parseable as number\cf0 \cb1 \strokec5 \
\cb3                 \});\cb1 \
\
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (isNumeric) \{\cb1 \
\cb3                     type = \cf10 \strokec10 'number'\cf0 \strokec5 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 inferredSchema[key] = type;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf13 \strokec13 return\cf0 \strokec5  inferredSchema;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Function to display schema in the UI\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  displaySchema(schema) \{\cb1 \
\cb3             schemaDisplay.innerHTML = \cf10 \strokec10 ''\cf0 \strokec5 ;\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (\cf15 \strokec15 Object\cf0 \strokec5 .keys(schema).length === \cf14 \strokec14 0\cf0 \strokec5 ) \{\cb1 \
\cb3                 schemaDisplay.innerHTML = \cf10 \strokec10 '<p class="text-gray-400 text-center py-4">Upload a CSV to intelligently infer and display its schema here.</p>'\cf0 \strokec5 ;\cb1 \
\cb3                 \cf13 \strokec13 return\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  ul = document.createElement(\cf10 \strokec10 'ul'\cf0 \strokec5 );\cb1 \
\cb3             ul.className = \cf10 \strokec10 'list-disc list-inside space-y-3'\cf0 \strokec5 ; \cf9 \strokec9 // Added space-y for better spacing\cf0 \cb1 \strokec5 \
\cb3             \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  key \cf13 \strokec13 in\cf0 \strokec5  schema) \{\cb1 \
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  li = document.createElement(\cf10 \strokec10 'li'\cf0 \strokec5 );\cb1 \
\cb3                 li.className = \cf10 \strokec10 'mb-1 text-gray-300'\cf0 \strokec5 ;\cb1 \
\cb3                 li.innerHTML = \cf10 \strokec10 `<span class="font-bold text-blue-400">\cf0 \strokec5 $\{key\}\cf10 \strokec10 </span>: <span class="text-blue-300 font-medium">\cf0 \strokec5 $\{schema[key]\}\cf10 \strokec10 </span>`\cf0 \strokec5 ;\cb1 \
\cb3                 ul.appendChild(li);\cb1 \
\cb3             \}\cb1 \
\cb3             schemaDisplay.appendChild(ul);\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Helper function to calculate average of a numeric column\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  calculateColumnAverage(columnName, data) \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  numericValues = data.map(row => \cf15 \strokec15 Number\cf0 \strokec5 (row[columnName])).filter(n => !isNaN(n));\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (numericValues.length === \cf14 \strokec14 0\cf0 \strokec5 ) \cf13 \strokec13 return\cf0 \strokec5  \cf14 \strokec14 0\cf0 \strokec5 ;\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  sum = numericValues.reduce((acc, val) => acc + val, \cf14 \strokec14 0\cf0 \strokec5 );\cb1 \
\cb3             \cf13 \strokec13 return\cf0 \strokec5  sum / numericValues.length;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Helper function to calculate sum of a numeric column\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  calculateColumnSum(columnName, data) \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  numericValues = data.map(row => \cf15 \strokec15 Number\cf0 \strokec5 (row[columnName])).filter(n => !isNaN(n));\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (numericValues.length === \cf14 \strokec14 0\cf0 \strokec5 ) \cf13 \strokec13 return\cf0 \strokec5  \cf14 \strokec14 0\cf0 \strokec5 ;\cb1 \
\cb3             \cf13 \strokec13 return\cf0 \strokec5  numericValues.reduce((acc, val) => acc + val, \cf14 \strokec14 0\cf0 \strokec5 );\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Helper function to find min/max of a numeric column\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  calculateColumnMinMax(columnName, data) \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  numericValues = data.map(row => \cf15 \strokec15 Number\cf0 \strokec5 (row[columnName])).filter(n => !isNaN(n));\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (numericValues.length === \cf14 \strokec14 0\cf0 \strokec5 ) \cf13 \strokec13 return\cf0 \strokec5  \{ min: \cf13 \strokec13 null\cf0 \strokec5 , max: \cf13 \strokec13 null\cf0 \strokec5  \};\cb1 \
\cb3             \cf13 \strokec13 return\cf0 \strokec5  \{ min: \cf15 \strokec15 Math\cf0 \strokec5 .min(...numericValues), max: \cf15 \strokec15 Math\cf0 \strokec5 .max(...numericValues) \};\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Advanced Feature: Check for missing values and suggest cleaning\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  checkAndSuggestDataCleaning(data, currentSchema) \{\cb1 \
\cb3             \cf13 \strokec13 let\cf0 \strokec5  suggestions = [];\cb1 \
\cb3             \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  col \cf13 \strokec13 in\cf0 \strokec5  currentSchema) \{\cb1 \
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (currentSchema[col] === \cf10 \strokec10 'number'\cf0 \strokec5 ) \{\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  missingCount = data.filter(row => row[col] === \cf10 \strokec10 ''\cf0 \strokec5  || row[col] === \cf13 \strokec13 undefined\cf0 \strokec5  || row[col] === \cf13 \strokec13 null\cf0 \strokec5 ).length;\cb1 \
\cb3                     \cf13 \strokec13 if\cf0 \strokec5  (missingCount > \cf14 \strokec14 0\cf0 \strokec5 ) \{\cb1 \
\cb3                         suggestions.push(\{\cb1 \
\cb3                             column: col,\cb1 \
\cb3                             type: \cf10 \strokec10 'missing_numeric'\cf0 \strokec5 ,\cb1 \
\cb3                             count: missingCount,\cb1 \
\cb3                             action: \cf10 \strokec10 'fill_average'\cf0 \cb1 \strokec5 \
\cb3                         \});\cb1 \
\cb3                     \}\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf9 \strokec9 // Add more checks here for other types of cleaning (e.g., inconsistent strings, outliers)\cf0 \cb1 \strokec5 \
\cb3             \}\cb1 \
\
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (suggestions.length > \cf14 \strokec14 0\cf0 \strokec5 ) \{\cb1 \
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  firstSuggestion = suggestions[\cf14 \strokec14 0\cf0 \strokec5 ]; \cf9 \strokec9 // For simplicity, handle only the first suggestion\cf0 \cb1 \strokec5 \
\cb3                 pendingCleaningSuggestion = firstSuggestion;\cb1 \
\cb3                 appendMessage(\cf10 \strokec10 'AI'\cf0 \strokec5 , \cf10 \strokec10 `I noticed \cf0 \strokec5 $\{firstSuggestion.count\}\cf10 \strokec10  missing values in the numeric column "<strong>\cf0 \strokec5 $\{firstSuggestion.column\}\cf10 \strokec10 </strong>". Would you like me to fill them with the column's average? (Type "yes" to confirm)`\cf0 \strokec5 , \cf10 \strokec10 'ai'\cf0 \strokec5 );\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                 pendingCleaningSuggestion = \cf13 \strokec13 null\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Handle CSV file input change\cf0 \cb1 \strokec5 \
\cb3         csvFileInput.addEventListener(\cf10 \strokec10 'change'\cf0 \strokec5 , (event) => \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  file = event.target.files[\cf14 \strokec14 0\cf0 \strokec5 ];\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (file) \{\cb1 \
\cb3                 fileNameDisplay.textContent = \cf10 \strokec10 `File: \cf0 \strokec5 $\{file.name\}\cf10 \strokec10 `\cf0 \strokec5 ;\cb1 \
\cb3                 uploadStatus.textContent = \cf10 \strokec10 'Loading and parsing...'\cf0 \strokec5 ;\cb1 \
\cb3                 uploadStatus.className = \cf10 \strokec10 'mt-2 text-base font-semibold text-blue-400 animate-pulse'\cf0 \strokec5 ;\cb1 \
\
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  reader = \cf13 \strokec13 new\cf0 \strokec5  \cf15 \strokec15 FileReader\cf0 \strokec5 ();\cb1 \
\cb3                 reader.onload = (e) => \{\cb1 \
\cb3                     \cf13 \strokec13 try\cf0 \strokec5  \{\cb1 \
\cb3                         rawData = parseCSV(e.target.result);\cb1 \
\cb3                         schema = inferSchema(rawData);\cb1 \
\cb3                         displaySchema(schema);\cb1 \
\cb3                         uploadStatus.textContent = \cf10 \strokec10 `Successfully loaded \cf0 \strokec5 $\{rawData.length\}\cf10 \strokec10  rows.`\cf0 \strokec5 ;\cb1 \
\cb3                         uploadStatus.className = \cf10 \strokec10 'mt-2 text-base font-semibold text-green-500'\cf0 \strokec5 ;\cb1 \
\
\cb3                         appendMessage(\cf10 \strokec10 'AI'\cf0 \strokec5 , \cf10 \strokec10 `Fantastic! I've successfully loaded your CSV and detected the following schema: <br><div class="code-block">\cf0 \strokec5 $\{\cf15 \strokec15 JSON\cf0 \strokec5 .stringify(schema, \cf13 \strokec13 null\cf0 \strokec5 , \cf14 \strokec14 2\cf0 \strokec5 )\}\cf10 \strokec10 </div><br>How can I assist you with your data analysis today?`\cf0 \strokec5 , \cf10 \strokec10 'ai'\cf0 \strokec5 );\cb1 \
\
\cb3                         \cf9 \strokec9 // Proactively check for data cleaning needs\cf0 \cb1 \strokec5 \
\cb3                         checkAndSuggestDataCleaning(rawData, schema);\cb1 \
\
\cb3                     \} \cf13 \strokec13 catch\cf0 \strokec5  (error) \{\cb1 \
\cb3                         uploadStatus.textContent = \cf10 \strokec10 `Error parsing CSV: \cf0 \strokec5 $\{error.message\}\cf10 \strokec10 `\cf0 \strokec5 ;\cb1 \
\cb3                         uploadStatus.className = \cf10 \strokec10 'mt-2 text-base font-semibold text-red-500'\cf0 \strokec5 ;\cb1 \
\cb3                         appendMessage(\cf10 \strokec10 'AI'\cf0 \strokec5 , \cf10 \strokec10 'Oops! There was an error loading your CSV. Please ensure it\\'s a valid CSV format with correct delimiters.'\cf0 \strokec5 , \cf10 \strokec10 'ai'\cf0 \strokec5 );\cb1 \
\cb3                     \}\cb1 \
\cb3                 \};\cb1 \
\cb3                 reader.readAsText(file);\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                 fileNameDisplay.textContent = \cf10 \strokec10 ''\cf0 \strokec5 ;\cb1 \
\cb3                 uploadStatus.textContent = \cf10 \strokec10 'No file selected.'\cf0 \strokec5 ;\cb1 \
\cb3                 uploadStatus.className = \cf10 \strokec10 'mt-2 text-base font-semibold text-gray-400'\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\cb3         \});\cb1 \
\
\cb3         \cf9 \strokec9 // Function to append messages to the chat area\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  appendMessage(sender, text, type = \cf10 \strokec10 'user'\cf0 \strokec5 ) \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  messageDiv = document.createElement(\cf10 \strokec10 'div'\cf0 \strokec5 );\cb1 \
\cb3             messageDiv.className = \cf10 \strokec10 `flex mb-4 \cf0 \strokec5 $\{type === \cf10 \strokec10 'user'\cf0 \strokec5  ? \cf10 \strokec10 'justify-end'\cf0 \strokec5  : \cf10 \strokec10 'items-start'\cf0 \strokec5 \}\cf10 \strokec10  fade-in-message`\cf0 \strokec5 ;\cb1 \
\
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (type === \cf10 \strokec10 'user'\cf0 \strokec5 ) \{\cb1 \
\cb3                 messageDiv.innerHTML = \cf10 \strokec10 `\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                     <div class="bg-blue-600 text-white p-4 rounded-3xl max-w-[80%] shadow-md transform hover:scale-[1.01] transition duration-200 ease-in-out">\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                         <p class="leading-relaxed">\cf0 \strokec5 $\{text\}\cf10 \strokec10 </p>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                     </div>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                     <div class="flex-shrink-0 w-10 h-10 bg-gray-500 rounded-full flex items-center justify-center text-white font-bold text-lg ml-4 shadow-md">You</div>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                 `\cf0 \strokec5 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \{ \cf9 \strokec9 // AI message\cf0 \cb1 \strokec5 \
\cb3                 messageDiv.innerHTML = \cf10 \strokec10 `\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                     <div class="flex-shrink-0 w-10 h-10 ai-avatar-gradient rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-md">AI</div>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                     <div class="bg-gray-700 text-gray-200 p-4 rounded-3xl max-w-[80%] shadow-md transform hover:scale-[1.01] transition duration-200 ease-in-out">\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                         <p class="leading-relaxed">\cf0 \strokec5 $\{text\}\cf10 \strokec10 </p>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                     </div>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                 `\cf0 \strokec5 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3             \}\cb1 \
\cb3             chatArea.appendChild(messageDiv);\cb1 \
\cb3             chatArea.scrollTop = chatArea.scrollHeight; \cf9 \strokec9 // Scroll to bottom\cf0 \cb1 \strokec5 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Simulated AI response and local execution\cf0 \cb1 \strokec5 \
\cb3         \cf13 \strokec13 function\cf0 \strokec5  simulateAIResponse(query) \{\cb1 \
\cb3             query = query.toLowerCase();\cb1 \
\cb3             \cf13 \strokec13 let\cf0 \strokec5  aiResponseText = \cf10 \strokec10 "I'm sorry, I couldn't quite understand that. My current prototype capabilities are limited. I can demonstrate:<br><ul><li><strong>'Show all data'</strong> or <strong>'show [column name]'</strong></li><li><strong>'Describe my dataset'</strong></li><li><strong>'Sum [column name]'</strong> or <strong>'Average [column name]'</strong></li><li><strong>'Filter data where [column] [operator] [value]'</strong> (e.g., 'sales > 1000' or 'city = \\"London\\"')</li></ul>If I've made a cleaning suggestion, you can type 'yes' to confirm."\cf0 \strokec5 ;\cb1 \
\cb3             \cf13 \strokec13 let\cf0 \strokec5  analysisContent = \cf10 \strokec10 ''\cf0 \strokec5 ;\cb1 \
\cb3             \cf13 \strokec13 let\cf0 \strokec5  codeExplanation = \cf10 \strokec10 ''\cf0 \strokec5 ; \cf9 \strokec9 // Separate variable for the code snippet explanation\cf0 \cb1 \strokec5 \
\
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (rawData.length === \cf14 \strokec14 0\cf0 \strokec5 ) \{\cb1 \
\cb3                 appendMessage(\cf10 \strokec10 'AI'\cf0 \strokec5 , \cf10 \strokec10 "Please upload a CSV file first before asking questions. I'm ready when you are!"\cf0 \strokec5 , \cf10 \strokec10 'ai'\cf0 \strokec5 );\cb1 \
\cb3                 \cf13 \strokec13 return\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf9 \strokec9 // Handle cleaning confirmation\cf0 \cb1 \strokec5 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (pendingCleaningSuggestion && (query === \cf10 \strokec10 'yes'\cf0 \strokec5  || query.includes(\cf10 \strokec10 'confirm'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'go ahead'\cf0 \strokec5 ))) \{\cb1 \
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  colToClean = pendingCleaningSuggestion.column;\cb1 \
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (pendingCleaningSuggestion.action === \cf10 \strokec10 'fill_average'\cf0 \strokec5 ) \{\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  average = calculateColumnAverage(colToClean, rawData);\cb1 \
\cb3                     codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to fill missing values in '\cf0 \strokec5 $\{colToClean\}\cf10 \strokec10 ' with average\\nfunction fillMissingWithAverage(columnName, data, average) \{\\n  return data.map(row => \{\\n    if (row[columnName] === '' || isNaN(Number(row[columnName]))) \{\\n      row[columnName] = average.toFixed(2); // Keep two decimal places\\n    \}\\n    return row;\\n  \});\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                     rawData = rawData.map(row => \{\cb1 \
\cb3                         \cf13 \strokec13 if\cf0 \strokec5  (row[colToClean] === \cf10 \strokec10 ''\cf0 \strokec5  || isNaN(\cf15 \strokec15 Number\cf0 \strokec5 (row[colToClean])) || row[colToClean] === \cf13 \strokec13 null\cf0 \strokec5  || row[colToClean] === \cf13 \strokec13 undefined\cf0 \strokec5 ) \{\cb1 \
\cb3                             row[colToClean] = average.toFixed(\cf14 \strokec14 2\cf0 \strokec5 ); \cf9 \strokec9 // Fill with average, keeping two decimal places\cf0 \cb1 \strokec5 \
\cb3                         \}\cb1 \
\cb3                         \cf13 \strokec13 return\cf0 \strokec5  row;\cb1 \
\cb3                     \});\cb1 \
\cb3                     aiResponseText = \cf10 \strokec10 `Great! I've successfully filled the \cf0 \strokec5 $\{pendingCleaningSuggestion.count\}\cf10 \strokec10  missing values in the column "<strong>\cf0 \strokec5 $\{colToClean\}\cf10 \strokec10 </strong>" with the calculated average of <strong>\cf0 \strokec5 $\{average.toFixed(\cf14 \strokec14 2\cf0 \strokec5 )\}\cf10 \strokec10 </strong>. Your data has been updated locally and privately.<br><br>Here's the JavaScript code that performed this action:`\cf0 \strokec5 ;\cb1 \
\cb3                     pendingCleaningSuggestion = \cf13 \strokec13 null\cf0 \strokec5 ; \cf9 \strokec9 // Clear the suggestion after execution\cf0 \cb1 \strokec5 \
\cb3                     \cf9 \strokec9 // No analysis content needed here, just the confirmation\cf0 \cb1 \strokec5 \
\cb3                 \}\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'sum '\cf0 \strokec5 )) \{\cb1 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  foundColumn = \cf13 \strokec13 null\cf0 \strokec5 ;\cb1 \
\cb3                 \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  col \cf13 \strokec13 in\cf0 \strokec5  schema) \{\cb1 \
\cb3                     \cf13 \strokec13 if\cf0 \strokec5  (query.includes(col.toLowerCase()) && schema[col] === \cf10 \strokec10 'number'\cf0 \strokec5 ) \{\cb1 \
\cb3                         foundColumn = col;\cb1 \
\cb3                         \cf13 \strokec13 break\cf0 \strokec5 ;\cb1 \
\cb3                     \}\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (foundColumn) \{\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  sum = calculateColumnSum(foundColumn, rawData);\cb1 \
\cb3                     codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to calculate sum of '\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 '\\nfunction calculateSum(columnName, data) \{\\n  return data.map(row => Number(row[columnName])).filter(n => !isNaN(n)).reduce((acc, val) => acc + val, 0);\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                     analysisContent = \cf10 \strokec10 `<p class="text-xl text-blue-400 font-bold mt-2">The sum of "\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 " is: \cf0 \strokec5 $\{sum.toFixed(\cf14 \strokec14 2\cf0 \strokec5 )\}\cf10 \strokec10 </p>`\cf0 \strokec5 ;\cb1 \
\cb3                     aiResponseText = \cf10 \strokec10 `Alright, I've calculated the **total sum** for the column "<strong>\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 </strong>". Here's the result and the JavaScript code I used:`\cf0 \strokec5 ;\cb1 \
\cb3                 \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                     aiResponseText = \cf10 \strokec10 "I couldn't find a **numeric column** to calculate the sum for. Please specify a valid numeric column, like 'sum sales'."\cf0 \strokec5 ;\cb1 \
\cb3                 \}\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'average '\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'avg '\cf0 \strokec5 )) \{\cb1 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  foundColumn = \cf13 \strokec13 null\cf0 \strokec5 ;\cb1 \
\cb3                 \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  col \cf13 \strokec13 in\cf0 \strokec5  schema) \{\cb1 \
\cb3                     \cf13 \strokec13 if\cf0 \strokec5  (query.includes(col.toLowerCase()) && schema[col] === \cf10 \strokec10 'number'\cf0 \strokec5 ) \{\cb1 \
\cb3                         foundColumn = col;\cb1 \
\cb3                         \cf13 \strokec13 break\cf0 \strokec5 ;\cb1 \
\cb3                     \}\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (foundColumn) \{\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  average = calculateColumnAverage(foundColumn, rawData);\cb1 \
\cb3                     codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to calculate average of '\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 '\\nfunction calculateAverage(columnName, data) \{\\n  const numericValues = data.map(row => Number(row[columnName])).filter(n => !isNaN(n));\\n  return numericValues.length > 0 ? (numericValues.reduce((sum, val) => sum + val, 0) / numericValues.length) : 0;\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                     analysisContent = \cf10 \strokec10 `<p class="text-xl text-blue-400 font-bold mt-2">The average of "\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 " is: \cf0 \strokec5 $\{average.toFixed(\cf14 \strokec14 2\cf0 \strokec5 )\}\cf10 \strokec10 </p>`\cf0 \strokec5 ;\cb1 \
\cb3                     aiResponseText = \cf10 \strokec10 `Understood! Here's the **average value** for the "<strong>\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 </strong>" column. Take a look at the result and the underlying JavaScript:`\cf0 \strokec5 ;\cb1 \
\cb3                 \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                     aiResponseText = \cf10 \strokec10 "I couldn't find a **numeric column** to calculate the average for. Please specify a valid numeric column, like 'average age'."\cf0 \strokec5 ;\cb1 \
\cb3                 \}\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'filter data where'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'show rows where'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'find entries where'\cf0 \strokec5 )) \{\cb1 \
\cb3                 \cf9 \strokec9 // Basic regex to extract column, operator, and value (simple cases only)\cf0 \cb1 \strokec5 \
\cb3                 \cf13 \strokec13 const\cf0 \strokec5  match = query.match(\cf7 \strokec7 /(filter data where|show rows where|find entries where)\\s+([\\w\\s]+)\\s*(<=|>=|<|>|=|!=)\\s*([\\w\\s."']+)/\cf0 \strokec5 );\cb1 \
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (match && match.length === \cf14 \strokec14 5\cf0 \strokec5 ) \{\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  colNameRaw = match[\cf14 \strokec14 2\cf0 \strokec5 ].trim();\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  operator = match[\cf14 \strokec14 3\cf0 \strokec5 ].trim();\cb1 \
\cb3                     \cf13 \strokec13 let\cf0 \strokec5  valueRaw = match[\cf14 \strokec14 4\cf0 \strokec5 ].trim();\cb1 \
\
\cb3                     \cf13 \strokec13 let\cf0 \strokec5  foundColumn = \cf13 \strokec13 null\cf0 \strokec5 ;\cb1 \
\cb3                     \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  col \cf13 \strokec13 in\cf0 \strokec5  schema) \{\cb1 \
\cb3                         \cf13 \strokec13 if\cf0 \strokec5  (colNameRaw.includes(col.toLowerCase())) \{\cb1 \
\cb3                             foundColumn = col;\cb1 \
\cb3                             \cf13 \strokec13 break\cf0 \strokec5 ;\cb1 \
\cb3                         \}\cb1 \
\cb3                     \}\cb1 \
\
\cb3                     \cf13 \strokec13 if\cf0 \strokec5  (foundColumn) \{\cb1 \
\cb3                         \cf13 \strokec13 let\cf0 \strokec5  filteredData = [];\cb1 \
\cb3                         \cf13 \strokec13 let\cf0 \strokec5  parsedValue;\cb1 \
\
\cb3                         \cf9 \strokec9 // Attempt to parse value based on schema type\cf0 \cb1 \strokec5 \
\cb3                         \cf13 \strokec13 if\cf0 \strokec5  (schema[foundColumn] === \cf10 \strokec10 'number'\cf0 \strokec5 ) \{\cb1 \
\cb3                             parsedValue = \cf15 \strokec15 Number\cf0 \strokec5 (valueRaw.replace(\cf7 \strokec7 /['"]/\cf13 \strokec13 g\cf0 \strokec5 , \cf10 \strokec10 ''\cf0 \strokec5 ));\cb1 \
\cb3                             \cf13 \strokec13 if\cf0 \strokec5  (isNaN(parsedValue)) \{\cb1 \
\cb3                                 aiResponseText = \cf10 \strokec10 `It looks like the value "\cf0 \strokec5 $\{valueRaw\}\cf10 \strokec10 " for numeric column "\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 " isn't a valid number. Please provide a numeric value for filtering.`\cf0 \strokec5 ;\cb1 \
\cb3                                 appendMessage(\cf10 \strokec10 'AI'\cf0 \strokec5 , aiResponseText, \cf10 \strokec10 'ai'\cf0 \strokec5 );\cb1 \
\cb3                                 \cf13 \strokec13 return\cf0 \strokec5 ;\cb1 \
\cb3                             \}\cb1 \
\cb3                             filteredData = rawData.filter(row => \{\cb1 \
\cb3                                 \cf13 \strokec13 const\cf0 \strokec5  cellValue = \cf15 \strokec15 Number\cf0 \strokec5 (row[foundColumn]);\cb1 \
\cb3                                 \cf13 \strokec13 if\cf0 \strokec5  (isNaN(cellValue)) \cf13 \strokec13 return\cf0 \strokec5  \cf13 \strokec13 false\cf0 \strokec5 ; \cf9 \strokec9 // Exclude non-numeric or missing values\cf0 \cb1 \strokec5 \
\cb3                                 \cf13 \strokec13 switch\cf0 \strokec5  (operator) \{\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '>'\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue > parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '<'\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue < parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '>='\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue >= parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '<='\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue <= parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '='\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue === parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '!='\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue !== parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 default\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  \cf13 \strokec13 false\cf0 \strokec5 ;\cb1 \
\cb3                                 \}\cb1 \
\cb3                             \});\cb1 \
\cb3                         \} \cf13 \strokec13 else\cf0 \strokec5  \{ \cf9 \strokec9 // String comparison\cf0 \cb1 \strokec5 \
\cb3                             parsedValue = valueRaw.replace(\cf7 \strokec7 /['"]/\cf13 \strokec13 g\cf0 \strokec5 , \cf10 \strokec10 ''\cf0 \strokec5 ).toLowerCase(); \cf9 \strokec9 // Remove quotes and make lowercase for case-insensitive match\cf0 \cb1 \strokec5 \
\cb3                             filteredData = rawData.filter(row => \{\cb1 \
\cb3                                 \cf13 \strokec13 const\cf0 \strokec5  cellValue = (row[foundColumn] || \cf10 \strokec10 ''\cf0 \strokec5 ).toLowerCase(); \cf9 \strokec9 // Handle undefined/null gracefully\cf0 \cb1 \strokec5 \
\cb3                                 \cf13 \strokec13 switch\cf0 \strokec5  (operator) \{\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '='\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue === parsedValue;\cb1 \
\cb3                                     \cf13 \strokec13 case\cf0 \strokec5  \cf10 \strokec10 '!='\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  cellValue !== parsedValue;\cb1 \
\cb3                                     \cf9 \strokec9 // Add other string operators if needed (e.g., .includes)\cf0 \cb1 \strokec5 \
\cb3                                     \cf13 \strokec13 default\cf0 \strokec5 : \cf13 \strokec13 return\cf0 \strokec5  \cf13 \strokec13 false\cf0 \strokec5 ; \cf9 \strokec9 // Only equals and not equals for strings in this prototype\cf0 \cb1 \strokec5 \
\cb3                                 \}\cb1 \
\cb3                             \});\cb1 \
\cb3                         \}\cb1 \
\
\cb3                         codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to filter data where '\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 ' \cf0 \strokec5 $\{operator\}\cf10 \strokec10  '\cf0 \strokec5 $\{valueRaw\}\cf10 \strokec10 '\\nfunction filterData(data, column, operator, value) \{\\n  return data.filter(row => \{\\n    // ... complex filtering logic based on type and operator\\n  \});\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                         analysisContent = \cf10 \strokec10 `<p class="text-gray-300 mt-2">I found <strong>\cf0 \strokec5 $\{filteredData.length\}\cf10 \strokec10  rows</strong> that match your condition where **\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10  \cf0 \strokec5 $\{operator\}\cf10 \strokec10  \cf0 \strokec5 $\{valueRaw\}\cf10 \strokec10 **.</p>\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                                           <p class="text-sm text-gray-400 mt-2">Here's a preview of the first 5 matching entries (remember, all processing is client-side!):</p>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                                           <div class="code-block mt-2">\cf0 \strokec5 $\{filteredData.slice(\cf14 \strokec14 0\cf0 \strokec5 , \cf14 \strokec14 5\cf0 \strokec5 ).map(row => \cf15 \strokec15 JSON\cf0 \strokec5 .stringify(row, \cf13 \strokec13 null\cf0 \strokec5 , \cf14 \strokec14 2\cf0 \strokec5 )).join(\cf10 \strokec10 '\\n'\cf0 \strokec5 )\}\cf10 \strokec10 </div>`\cf0 \strokec5 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3                         aiResponseText = \cf10 \strokec10 `Filtering complete! I've processed your data based on the condition "\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10  \cf0 \strokec5 $\{operator\}\cf10 \strokec10  \cf0 \strokec5 $\{valueRaw\}\cf10 \strokec10 ". Here's the summary and the code:`\cf0 \strokec5 ;\cb1 \
\cb3                     \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                         aiResponseText = \cf10 \strokec10 "I couldn't identify the column to filter on. Please specify a valid column from your schema."\cf0 \strokec5 ;\cb1 \
\cb3                     \}\cb1 \
\cb3                 \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                     aiResponseText = \cf10 \strokec10 "I need a clearer filter condition. Please use the format: **'filter data where [column] [operator] [value]'**, e.g., 'filter data where sales > 1000' or 'filter data where city = \\"London\\"'."\cf0 \strokec5 ;\cb1 \
\cb3                 \}\cb1 \
\
\cb3             \}\cb1 \
\cb3             \cf9 \strokec9 // Existing commands\cf0 \cb1 \strokec5 \
\cb3             \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'show all data'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'display all data'\cf0 \strokec5 )) \{\cb1 \
\cb3                 codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to display all data\\nfunction displayAllData() \{\\n  return rawData.map(row => JSON.stringify(row)).join('\\\\n');\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                 analysisContent = \cf10 \strokec10 `<p class="text-gray-300 mt-2">Here's a preview of the **first 10 rows** from your dataset:</p>\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                                   <div class="code-block mt-2">\cf0 \strokec5 $\{rawData.slice(\cf14 \strokec14 0\cf0 \strokec5 , \cf14 \strokec14 10\cf0 \strokec5 ).map(row => \cf15 \strokec15 JSON\cf0 \strokec5 .stringify(row, \cf13 \strokec13 null\cf0 \strokec5 , \cf14 \strokec14 2\cf0 \strokec5 )).join(\cf10 \strokec10 '\\n'\cf0 \strokec5 )\}\cf10 \strokec10 </div>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                                   <p class="text-sm text-gray-400 mt-2">You have a total of \cf0 \strokec5 $\{rawData.length\}\cf10 \strokec10  rows. This data is processed entirely on your device!</p>`\cf0 \strokec5 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3                 aiResponseText = \cf10 \strokec10 `Understood! I've generated and executed the following JavaScript code to display your data.`\cf0 \strokec5 ;\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'show schema'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'display schema'\cf0 \strokec5 )) \{\cb1 \
\cb3                 codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to display schema\\nfunction displaySchema() \{\\n  return JSON.stringify(schema, null, 2);\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                 analysisContent = \cf10 \strokec10 `<p class="text-gray-300 mt-2">Here's the **schema I inferred** from your uploaded data:</p>\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                                   <div class="code-block mt-2">\cf0 \strokec5 $\{\cf15 \strokec15 JSON\cf0 \strokec5 .stringify(schema, \cf13 \strokec13 null\cf0 \strokec5 , \cf14 \strokec14 2\cf0 \strokec5 )\}\cf10 \strokec10 </div>`\cf0 \strokec5 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3                 aiResponseText = \cf10 \strokec10 `Certainly! I've extracted the schema for you. All schema inference happens privately in your browser.`\cf0 \strokec5 ;\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'show'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'display'\cf0 \strokec5 )) \{\cb1 \
\cb3                 \cf9 \strokec9 // Try to find a column name in the query\cf0 \cb1 \strokec5 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  foundColumn = \cf13 \strokec13 null\cf0 \strokec5 ;\cb1 \
\cb3                 \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  col \cf13 \strokec13 in\cf0 \strokec5  schema) \{\cb1 \
\cb3                     \cf13 \strokec13 if\cf0 \strokec5  (query.includes(col.toLowerCase())) \{\cb1 \
\cb3                         foundColumn = col;\cb1 \
\cb3                         \cf13 \strokec13 break\cf0 \strokec5 ;\cb1 \
\cb3                     \}\cb1 \
\cb3                 \}\cb1 \
\
\cb3                 \cf13 \strokec13 if\cf0 \strokec5  (foundColumn) \{\cb1 \
\cb3                     codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to display column '\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 '\\nfunction displayColumn(columnName) \{\\n  return rawData.map(row => row[columnName]);\\n\}`\cf0 \strokec5 ;\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  columnValues = rawData.map(row => row[foundColumn]);\cb1 \
\cb3                     analysisContent = \cf10 \strokec10 `<p class="text-gray-300 mt-2">Here are the **first 10 values** from the "<strong>\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 </strong>" column:</p>\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                                       <div class="code-block mt-2">\cf0 \strokec5 $\{columnValues.slice(\cf14 \strokec14 0\cf0 \strokec5 , \cf14 \strokec14 10\cf0 \strokec5 ).join(\cf10 \strokec10 '\\n'\cf0 \strokec5 )\}\cf10 \strokec10 </div>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                                       <p class="text-sm text-gray-400 mt-2">There are \cf0 \strokec5 $\{columnValues.length\}\cf10 \strokec10  total values in this column.</p>`\cf0 \strokec5 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3                     aiResponseText = \cf10 \strokec10 `Absolutely! Here's the data for column "\cf0 \strokec5 $\{foundColumn\}\cf10 \strokec10 ", retrieved instantly from your local dataset.`\cf0 \strokec5 ;\cb1 \
\cb3                 \}\cb1 \
\cb3             \} \cf13 \strokec13 else\cf0 \strokec5  \cf13 \strokec13 if\cf0 \strokec5  (query.includes(\cf10 \strokec10 'describe my dataset'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'summarize data'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'give me an overview'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 'tell me about my data'\cf0 \strokec5 ) || query.includes(\cf10 \strokec10 "what's in my data"\cf0 \strokec5 )) \{\cb1 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  numRows = rawData.length;\cb1 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  numCols = \cf15 \strokec15 Object\cf0 \strokec5 .keys(schema).length;\cb1 \
\cb3                 \cf13 \strokec13 let\cf0 \strokec5  descriptionNarrative = \cf10 \strokec10 `<p class="text-gray-300 leading-relaxed mb-3">Alright, let's take a look at your dataset. It appears you have **\cf0 \strokec5 $\{numRows\}\cf10 \strokec10  rows**, which means \cf0 \strokec5 $\{numRows\}\cf10 \strokec10  individual records, and **\cf0 \strokec5 $\{numCols\}\cf10 \strokec10  columns**, representing \cf0 \strokec5 $\{numCols\}\cf10 \strokec10  different types of information.</p>\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10                                             <h5 class="text-md font-semibold mt-3 mb-2 text-gray-200">Here's a breakdown of what I found in each column:</h5>\cf0 \cb1 \strokec5 \
\cf10 \cb3 \strokec10                                             <ul class="list-disc list-inside text-gray-300 ml-4 space-y-2">`\cf0 \strokec5 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3                 codeExplanation = \cf10 \strokec10 `// AI generated JavaScript to describe the dataset\\nfunction describeDataset() \{\\n  const stats = \{\};\\n  const numRows = rawData.length;\\n  const numCols = Object.keys(rawData[0]).length;\\n\\n  for (const col in schema) \{\\n    const values = rawData.map(row => row[col]);\\n    if (schema[col] === 'number') \{\\n      const numericValues = values.map(Number).filter(n => !isNaN(n));\\n      if (numericValues.length > 0) \{\\n        stats[col] = \{\\n          type: 'number',\\n          min: Math.min(...numericValues),\\n          max: Math.max(...numericValues),\\n          avg: (numericValues.reduce((sum, val) => sum + val, 0) / numericValues.length).toFixed(2)\\n        \};\\n      \}\\n    \} else \{\\n      const uniqueValues = [...new Set(values)];\\n      const valueCounts = \{\};\\n      values.forEach(v => \{ valueCounts[v] = (valueCounts[v] || 0) + 1; \});\\n      const sortedCounts = Object.entries(valueCounts).sort(([,a],[,b]) => b-a);\\n      stats[col] = \{\\n        type: 'string',\\n        unique: uniqueValues.length,\\n        top_5: sortedCounts.slice(0,5).map(item => \\`"\\$\{item[0]\}" (\\$\{item[1]\} occurrences)\\`)\\n      \};\\n    \}\\n  \}\\n  return stats;\\n\}`\cf0 \strokec5 ;\cb1 \
\
\
\cb3                 \cf13 \strokec13 for\cf0 \strokec5  (\cf13 \strokec13 const\cf0 \strokec5  col \cf13 \strokec13 in\cf0 \strokec5  schema) \{\cb1 \
\cb3                     descriptionNarrative += \cf10 \strokec10 `<li class="font-medium">\cf0 \strokec5 $\{col\}\cf10 \strokec10 : (<span class="text-blue-400">\cf0 \strokec5 $\{schema[col]\}\cf10 \strokec10 </span> type) `\cf0 \strokec5 ;\cb1 \
\cb3                     \cf13 \strokec13 const\cf0 \strokec5  values = rawData.map(row => row[col]);\cb1 \
\
\cb3                     \cf13 \strokec13 if\cf0 \strokec5  (schema[col] === \cf10 \strokec10 'number'\cf0 \strokec5 ) \{\cb1 \
\cb3                         \cf13 \strokec13 const\cf0 \strokec5  numericValues = values.map(\cf15 \strokec15 Number\cf0 \strokec5 ).filter(n => !isNaN(n));\cb1 \
\cb3                         \cf13 \strokec13 const\cf0 \strokec5  \{ min: minVal, max: maxVal \} = calculateColumnMinMax(col, rawData);\cb1 \
\cb3                         \cf13 \strokec13 const\cf0 \strokec5  avgVal = calculateColumnAverage(col, rawData);\cb1 \
\
\cb3                         \cf13 \strokec13 if\cf0 \strokec5  (numericValues.length > \cf14 \strokec14 0\cf0 \strokec5 ) \{\cb1 \
\cb3                             descriptionNarrative += \cf10 \strokec10 `This column contains numerical data, ranging from **\cf0 \strokec5 $\{minVal\}\cf10 \strokec10 ** to **\cf0 \strokec5 $\{maxVal\}\cf10 \strokec10 **, with an average value of approximately **\cf0 \strokec5 $\{avgVal.toFixed(\cf14 \strokec14 2\cf0 \strokec5 )\}\cf10 \strokec10 **.`\cf0 \strokec5 ;\cb1 \
\cb3                         \} \cf13 \strokec13 else\cf0 \strokec5  \{\cb1 \
\cb3                             descriptionNarrative += \cf10 \strokec10 `This numeric column currently has no valid numerical entries.`\cf0 \strokec5 ;\cb1 \
\cb3                         \}\cb1 \
\cb3                     \} \cf13 \strokec13 else\cf0 \strokec5  \{ \cf9 \strokec9 // string type\cf0 \cb1 \strokec5 \
\cb3                         \cf13 \strokec13 const\cf0 \strokec5  uniqueValues = [...\cf13 \strokec13 new\cf0 \strokec5  \cf15 \strokec15 Set\cf0 \strokec5 (values)];\cb1 \
\cb3                         \cf13 \strokec13 const\cf0 \strokec5  valueCounts = \{\};\cb1 \
\cb3                         values.forEach(v => \{ valueCounts[v] = (valueCounts[v] || \cf14 \strokec14 0\cf0 \strokec5 ) + \cf14 \strokec14 1\cf0 \strokec5 ; \});\cb1 \
\cb3                         \cf13 \strokec13 const\cf0 \strokec5  sortedCounts = \cf15 \strokec15 Object\cf0 \strokec5 .entries(valueCounts).sort(([,a],[,b]) => b-a);\cb1 \
\cb3                         descriptionNarrative += \cf10 \strokec10 `This column holds text information. I found **\cf0 \strokec5 $\{uniqueValues.length\}\cf10 \strokec10  unique values**. The most frequent entries are: \cf0 \strokec5 $\{sortedCounts.slice(\cf14 \strokec14 0\cf0 \strokec5 , \cf14 \strokec14 5\cf0 \strokec5 ).map(item => \cf10 \strokec10 `"\cf0 \strokec5 $\{item[\cf14 \strokec14 0\cf0 \strokec5 ]\}\cf10 \strokec10 " appearing \cf0 \strokec5 $\{item[\cf14 \strokec14 1\cf0 \strokec5 ]\}\cf10 \strokec10  times`\cf0 \strokec5 ).join(\cf10 \strokec10 ', '\cf0 \strokec5 )\}\cf10 \strokec10 .`\cf0 \strokec5 ;\cb1 \
\cb3                     \}\cb1 \
\cb3                     descriptionNarrative += \cf10 \strokec10 `</li>`\cf0 \strokec5 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 descriptionNarrative += \cf10 \strokec10 `</ul>`\cf0 \strokec5 ;\cb1 \
\
\cb3                 analysisContent = descriptionNarrative; \cf9 \strokec9 // Direct use of the narrative HTML\cf0 \cb1 \strokec5 \
\cb3                 aiResponseText = \cf10 \strokec10 `Certainly! Here's a comprehensive overview and description of your dataset, crafted to give you quick insights. This analysis was performed entirely client-side, ensuring your data's privacy.<br><br>Here's the JavaScript code for this analysis:`\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf9 \strokec9 // Construct the final AI message, combining narrative, code, and result\cf0 \cb1 \strokec5 \
\cb3             \cf13 \strokec13 let\cf0 \strokec5  finalAIMessage = aiResponseText;\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (codeExplanation) \{\cb1 \
\cb3                 finalAIMessage += \cf10 \strokec10 `<div class="code-block mt-4">\cf0 \strokec5 $\{codeExplanation\}\cf10 \strokec10 </div>`\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (analysisContent) \{\cb1 \
\cb3                 finalAIMessage += \cf10 \strokec10 `<div class="mt-4">\cf0 \strokec5 $\{analysisContent\}\cf10 \strokec10 </div>`\cf0 \strokec5 ;\cb1 \
\cb3             \}\cb1 \
\
\cb3             appendMessage(\cf10 \strokec10 'AI'\cf0 \strokec5 , finalAIMessage, \cf10 \strokec10 'ai'\cf0 \strokec5 );\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf9 \strokec9 // Handle sending messages\cf0 \cb1 \strokec5 \
\cb3         sendMessageBtn.addEventListener(\cf10 \strokec10 'click'\cf0 \strokec5 , () => \{\cb1 \
\cb3             \cf13 \strokec13 const\cf0 \strokec5  query = chatInput.value.trim();\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (query) \{\cb1 \
\cb3                 appendMessage(\cf10 \strokec10 'You'\cf0 \strokec5 , query, \cf10 \strokec10 'user'\cf0 \strokec5 );\cb1 \
\cb3                 chatInput.value = \cf10 \strokec10 ''\cf0 \strokec5 ; \cf9 \strokec9 // Clear input\cf0 \cb1 \strokec5 \
\cb3                 simulateAIResponse(query);\cb1 \
\cb3             \}\cb1 \
\cb3         \});\cb1 \
\
\cb3         chatInput.addEventListener(\cf10 \strokec10 'keypress'\cf0 \strokec5 , (event) => \{\cb1 \
\cb3             \cf13 \strokec13 if\cf0 \strokec5  (event.key === \cf10 \strokec10 'Enter'\cf0 \strokec5 ) \{\cb1 \
\cb3                 sendMessageBtn.click();\cb1 \
\cb3             \}\cb1 \
\cb3         \});\cb1 \
\
\cb3         \cf9 \strokec9 // Initial schema display\cf0 \cb1 \strokec5 \
\cb3         displaySchema(schema);\cb1 \
\cb3     \cf6 \strokec6 </\cf7 \strokec7 script\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 </\cf7 \strokec7 body\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\cf6 \cb3 \strokec6 </\cf7 \strokec7 html\cf6 \strokec6 >\cf0 \cb1 \strokec5 \
\
}